#!/usr/bin/env python3
"""
Basic Integration Test - No external dependencies
Just checks if code is structured correctly
"""

import sys
import os

project_root = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, project_root)

print("="*80)
print("  BASIC INTEGRATION TEST")
print("  (No external API calls, no heavy dependencies)")
print("="*80)

# Test 1: Check files exist
print("\n1Ô∏è‚É£ Checking if new files exist...")
files_to_check = [
    'news/__init__.py',
    'news/news_fetcher.py',
    'news/sentiment_analyzer.py',
    'news/sentiment_cache.py',
]

all_exist = True
for file in files_to_check:
    filepath = os.path.join(project_root, file)
    if os.path.exists(filepath):
        print(f"   ‚úÖ {file}")
    else:
        print(f"   ‚ùå {file} NOT FOUND")
        all_exist = False

if all_exist:
    print("‚úÖ All files exist!")
else:
    print("‚ùå Some files missing!")
    sys.exit(1)

# Test 2: Check imports
print("\n2Ô∏è‚É£ Checking if modules can be imported...")

try:
    from agents.trading_strategies import TradingStrategies
    print("   ‚úÖ TradingStrategies")
except Exception as e:
    print(f"   ‚ùå TradingStrategies: {e}")
    sys.exit(1)

try:
    from agents.risk import RiskAgent
    print("   ‚úÖ RiskAgent")
except Exception as e:
    print(f"   ‚ùå RiskAgent: {e}")
    sys.exit(1)

# Test 3: Check new strategies exist
print("\n3Ô∏è‚É£ Checking if new strategies are registered...")

try:
    strategies = TradingStrategies({})
    all_strategies = strategies.get_all_strategies()
    
    new_strategies = ['composite_technical_strategy', 'sentiment_adjusted_strategy']
    
    for strategy in new_strategies:
        if strategy in all_strategies:
            print(f"   ‚úÖ {strategy}")
        else:
            print(f"   ‚ùå {strategy} NOT in strategy list")
            sys.exit(1)
    
    print("‚úÖ New strategies registered!")
    
except Exception as e:
    print(f"‚ùå Error checking strategies: {e}")
    import traceback
    traceback.print_exc()
    sys.exit(1)

# Test 4: Check strategy methods exist
print("\n4Ô∏è‚É£ Checking if strategy methods exist...")

try:
    strategies = TradingStrategies({})
    
    if hasattr(strategies, 'composite_technical_strategy'):
        print("   ‚úÖ composite_technical_strategy() method exists")
    else:
        print("   ‚ùå composite_technical_strategy() method NOT FOUND")
        sys.exit(1)
    
    if hasattr(strategies, 'sentiment_adjusted_strategy'):
        print("   ‚úÖ sentiment_adjusted_strategy() method exists")
    else:
        print("   ‚ùå sentiment_adjusted_strategy() method NOT FOUND")
        sys.exit(1)
    
    print("‚úÖ All strategy methods exist!")
    
except Exception as e:
    print(f"‚ùå Error: {e}")
    import traceback
    traceback.print_exc()
    sys.exit(1)

# Test 5: Check Risk Agent enhancement
print("\n5Ô∏è‚É£ Checking Risk Agent enhancements...")

try:
    from agents.risk import RiskAgent
    
    risk_agent = RiskAgent({
        'risk': {
            'min_pool_depth_usd': 10000,
            'max_slippage_bps': 50,
            'pool_score_threshold': 0.5,
            'max_trade_usdc': 1000
        },
        'risk_parameters': {
            'sharpe_risk_free_rate': 0.04
        }
    })
    
    if hasattr(risk_agent, 'calculate_sentiment_adjusted_position_size'):
        print("   ‚úÖ calculate_sentiment_adjusted_position_size() method exists")
    else:
        print("   ‚ùå calculate_sentiment_adjusted_position_size() NOT FOUND")
        sys.exit(1)
    
    print("‚úÖ Risk Agent enhanced!")
    
except Exception as e:
    print(f"‚ùå Error: {e}")
    import traceback
    traceback.print_exc()
    sys.exit(1)

# Test 6: Test composite strategy with mock data (no sentiment)
print("\n6Ô∏è‚É£ Testing composite strategy with mock data...")

try:
    strategies = TradingStrategies({})
    
    # Mock data with enough history
    mock_data = {
        'prices': [45000 + i for i in range(250)],
        'volumes': [1000000] * 250,
        'assets': {'BTC': {'change_24h': 2.5}}
    }
    
    result = strategies.composite_technical_strategy('BTC', mock_data)
    
    print(f"   Action: {result.action}")
    print(f"   Confidence: {result.confidence:.1%}")
    print(f"   Reasoning: {result.reasoning[:60]}...")
    
    if result.action in ['BUY', 'SELL', 'HOLD']:
        print("‚úÖ Composite strategy works!")
    else:
        print(f"‚ùå Invalid action: {result.action}")
        sys.exit(1)
    
except Exception as e:
    print(f"‚ùå Error: {e}")
    import traceback
    traceback.print_exc()
    sys.exit(1)

# Test 7: Test sentiment-adjusted strategy (with mock sentiment)
print("\n7Ô∏è‚É£ Testing sentiment-adjusted strategy with mock sentiment...")

try:
    strategies = TradingStrategies({})
    
    mock_data = {
        'prices': [45000 + i for i in range(250)],
        'volumes': [1000000] * 250,
        'assets': {'BTC': {'change_24h': 2.5}},
        'sentiment': {
            'sentiment': 'positive',
            'score': 0.7,
            'confidence': 0.8,
            'news_count': 5
        }
    }
    
    result = strategies.sentiment_adjusted_strategy('BTC', mock_data)
    
    print(f"   Action: {result.action}")
    print(f"   Confidence: {result.confidence:.1%}")
    print(f"   Reasoning: {result.reasoning[:60]}...")
    
    if result.action in ['BUY', 'SELL', 'HOLD']:
        print("‚úÖ Sentiment-adjusted strategy works!")
    else:
        print(f"‚ùå Invalid action: {result.action}")
        sys.exit(1)
    
except Exception as e:
    print(f"‚ùå Error: {e}")
    import traceback
    traceback.print_exc()
    sys.exit(1)

# Test 8: Test Risk Agent sentiment adjustment
print("\n8Ô∏è‚É£ Testing Risk Agent sentiment adjustment...")

try:
    from agents.risk import RiskAgent
    
    risk_agent = RiskAgent({
        'risk': {
            'min_pool_depth_usd': 10000,
            'max_slippage_bps': 50,
            'pool_score_threshold': 0.5,
            'max_trade_usdc': 1000
        },
        'risk_parameters': {
            'sharpe_risk_free_rate': 0.04
        }
    })
    
    # Test with positive sentiment
    adjusted = risk_agent.calculate_sentiment_adjusted_position_size(
        'BTC',
        0.30,  # 30% base position
        {'sentiment': 'positive', 'score': 0.6, 'news_count': 4}
    )
    
    print(f"   Base: 30% ‚Üí Adjusted: {adjusted:.1%}")
    
    if 0.0 <= adjusted <= 1.0:
        print("‚úÖ Risk Agent sentiment adjustment works!")
    else:
        print(f"‚ùå Invalid adjusted position: {adjusted}")
        sys.exit(1)
    
except Exception as e:
    print(f"‚ùå Error: {e}")
    import traceback
    traceback.print_exc()
    sys.exit(1)

# Final Summary
print("\n" + "="*80)
print("  ‚úÖ ALL BASIC INTEGRATION TESTS PASSED!")
print("="*80)

print("\nüìä Summary:")
print("   ‚úÖ All files exist")
print("   ‚úÖ All modules import correctly")
print("   ‚úÖ New strategies registered")
print("   ‚úÖ Strategy methods exist")
print("   ‚úÖ Risk Agent enhanced")
print("   ‚úÖ Composite strategy works (with mock data)")
print("   ‚úÖ Sentiment-adjusted strategy works (with mock sentiment)")
print("   ‚úÖ Risk Agent sentiment adjustment works")

print("\nüí° Next Steps:")
print("   1. Install dependencies:")
print("      pip install feedparser textblob")
print("      python -m textblob.download_corpora")
print("\n   2. Test with real news (will use FREE RSS feeds):")
print("      python test_sentiment_system_dryrun.py")
print("\n   3. Run full system:")
print("      python smart_start.py")

print("\nüîí No OpenAI API calls made - your credits are safe!")
print("\nüéâ Enhancement implementation is COMPLETE and WORKING!")

sys.exit(0)

